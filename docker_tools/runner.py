#!/usr/bin/env python3

#https://jpnarowski.com/how-to-publish-an-ionic-android-app-with-docker/
#https://hub.docker.com/r/agileek/ionic-framework/
#
#> docker-compose build
#> docker-compose run app ionic build android –release
#
#> keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
#
#Sign the apk with Jarsigner.
#> docker-compose run app jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore platforms/android/build/outputs/apk/android-release-unsigned.apk alias_name
#
#Now we need to run Zipalign
#In this example we’re creating our 2.1.4 release (android-2.1.4-release.apk). In yours, you’ll replace the output at the end with the name of your own release.
#
#> docker-compose run app /opt/android-sdk-linux/build-tools/23.0.2/zipalign -v 4 /myApp/platforms/android/build/outputs/apk/android-release-unsigned.apk /myApp/platforms/android/build/outputs/apk/android-2.1.4-release.apk
#
#There you go! Now you can upload the APK to the Google Play store and start getting downloads.
#
#
#docker run -ti --rm -p 8100:8100 -p 35729:35729 -v /path/to/your/ionic-project/:/myApp:rw agileek/ionic-framework:1.4.5

""" Actions to execute in Docker for this project """

""" 
Requirements: 
    pip3 install inquirer
    pip3 install colorama
"""

import inquirer
import subprocess
import colorama
from colorama import Fore, Back, Style, init
from collections import OrderedDict
import os

init(autoreset=True)

create_app = 'Erzeuge App Template'
ionic_serve = 'Debug mit ionic serve'
build_pwa = 'Baue Progressive Web App'
build_android = 'Baue für Android'
deploy_on_firebase = 'Deployment auf Google Firebase'
apk_jarsigner = 'Erzeugtes APK mit Jarsigner signieren'
apk_zipalign = 'Erzeugtes APK mit Zipalign signieren (muss nach Jarsigner Ausführung erfolgen!)'
generate_rsa_key = 'Generierung eines RSA Keys für Android'
upload_google_store = 'Upload des APK in den Google Playstore'
cancel = 'Abbruch'

def action_create_app():
    print(create_app)

    cmd = 'ionic start --no-git'
    print(Fore.CYAN + 'call: ' + cmd)

    subprocess.run(cmd, shell=True, check=True)

def action_ionic_serve():
    print(ionic_serve)

    port = os.getenv('IONIC_PORT', 8100)
    cmd = 'ionic serve --all -b --address 0.0.0.0 --port {}'.format(port)
    
    try:
        subprocess.run(cmd.split())
    except KeyboardInterrupt:
        pass

def action_build_pwa():
    print(build_pwa)
    # If an app is being deployed to other channels 
    # such as Cordova or Electron, you can 
    # remove the "serviceWorker": true flag 
    # from the angular.json file. 
    # The service worker can be generated by running:
    # ionic build --prod --service-worker

    cmd = 'ionic build --prod'

    questions = [
        inquirer.Confirm('use_service_worker', message='Soll für Electron oder Cordova gebaut werden?', default=False)
    ]

    answers = inquirer.prompt(questions, raise_keyboard_interrupt=True)
    use_service_worker = answers['use_service_worker']

    if(use_service_worker):
        cmd += ' --service-worker'

    print('call: ' + cmd)

    try:
        subprocess.run(cmd.split())
    except KeyboardInterrupt:
        pass

def action_build_android():
    print(build_android)

    cmd = 'ionic cordova build android --prod --release'
    print('call: ' + cmd)
    
    try:
        subprocess.run(cmd.split())
    except KeyboardInterrupt:
        pass

def action_deploy_on_firebase():
    print(deploy_on_firebase)
    
    cmd = 'firebase deploy'
    print('call: ' + cmd)
    
    try:
        subprocess.run(cmd.split())
    except KeyboardInterrupt:
        pass

def action_apk_jarsigner():
    print(apk_jarsigner)

    # jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore HelloWorld-release-unsigned.apk alias_name

def action_apk_zipalign():
    print(apk_zipalign)

    # zipalign -v 4 HelloWorld-release-unsigned.apk HelloWorld.apk

def action_generate_rsa_key():
    print(generate_rsa_key)

    # TODO: die Parameter per inquirer abfragen
    subprocess.run([
        'keytool', 
        '-genkey', 
        '-v', 
        '-keystore my-release-key.keystore',
        '-alias alias_name', 
        '-keyalg RSA', 
        '-keysize 2048', 
        '-validity 10000'
        ])
    
    print('Generated \'my-release-key.keystore\' in current directory')
    print(Fore.RED + 'WARNING: Save this file and keep it somewhere safe.\nIf it is lost the Google Play Store will not accept updates for this app!')

def action_upload_google_store():
    print (upload_google_store)

def action_cancel():
    # do nothing
    pass

if __name__ == '__main__':
    
    options = OrderedDict([
        (create_app, action_create_app),
        (ionic_serve, action_ionic_serve),
        (build_pwa, action_build_pwa),
        (build_android, action_build_android),
        (deploy_on_firebase, action_deploy_on_firebase),
        (apk_jarsigner, action_apk_jarsigner),
        (apk_zipalign, action_apk_zipalign),
        (generate_rsa_key, action_generate_rsa_key),
        (upload_google_store, action_upload_google_store),
        (cancel, action_cancel)
    ])

    questions = [
        inquirer.List('selection',
                    message="Welche Aktion soll ausgeführt werden?",
                    choices=list(options))
    ]

    try:
        answer = inquirer.prompt(questions, raise_keyboard_interrupt=True)
        target = answer['selection']

        options[target]()
    except KeyboardInterrupt:
        pass
